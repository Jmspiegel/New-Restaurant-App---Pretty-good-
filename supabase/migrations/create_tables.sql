/*
  # Create restaurant ordering system tables

  1. New Tables
    - `profiles`
      - `id` (uuid, primary key)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
      - `full_name` (text)
      - `role` (text)
    - `menu_items`
      - `id` (bigint, primary key)
      - `created_at` (timestamp)
      - `name` (text)
      - `description` (text)
      - `price` (numeric)
      - `image_url` (text)
      - `category` (text)
      - `available` (boolean)
      - `preparation_time` (integer)
    - `orders`
      - `id` (bigint, primary key)
      - `created_at` (timestamp)
      - `user_id` (uuid, foreign key to auth.users)
      - `status` (text)
      - `total` (numeric)
      - `table_number` (integer)
      - `special_instructions` (text)
    - `order_items`
      - `id` (bigint, primary key)
      - `created_at` (timestamp)
      - `order_id` (bigint, foreign key to orders)
      - `menu_item_id` (bigint, foreign key to menu_items)
      - `quantity` (integer)
      - `subtotal` (numeric)
      - `status` (text)
  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users
*/

-- Create profiles table
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  full_name TEXT,
  role TEXT DEFAULT 'customer'
);

-- Create menu_items table
CREATE TABLE IF NOT EXISTS menu_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT now(),
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  price NUMERIC NOT NULL CHECK (price > 0),
  image_url TEXT NOT NULL,
  category TEXT NOT NULL,
  available BOOLEAN DEFAULT true,
  preparation_time INTEGER NOT NULL
);

-- Create orders table
CREATE TABLE IF NOT EXISTS orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT now(),
  user_id UUID REFERENCES auth.users NOT NULL,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'preparing', 'ready', 'delivered', 'cancelled')),
  total NUMERIC NOT NULL CHECK (total >= 0),
  table_number INTEGER,
  special_instructions TEXT
);

-- Create order_items table
CREATE TABLE IF NOT EXISTS order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT now(),
  order_id BIGINT REFERENCES orders ON DELETE CASCADE NOT NULL,
  menu_item_id BIGINT REFERENCES menu_items NOT NULL,
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  subtotal NUMERIC NOT NULL CHECK (subtotal >= 0),
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'preparing', 'ready', 'delivered'))
);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE menu_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view their own profile"
  ON profiles
  FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
  ON profiles
  FOR UPDATE
  USING (auth.uid() = id);

-- Menu items policies (public read access)
CREATE POLICY "Menu items are viewable by everyone"
  ON menu_items
  FOR SELECT
  TO authenticated, anon
  USING (true);

CREATE POLICY "Staff can manage menu items"
  ON menu_items
  FOR ALL
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.role IN ('admin', 'staff')
  ));

-- Orders policies
CREATE POLICY "Users can view their own orders"
  ON orders
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own orders"
  ON orders
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Staff can view all orders"
  ON orders
  FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.role IN ('admin', 'staff')
  ));

CREATE POLICY "Staff can update orders"
  ON orders
  FOR UPDATE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.role IN ('admin', 'staff')
  ));

-- Order items policies
CREATE POLICY "Users can view their own order items"
  ON order_items
  FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM orders
    WHERE orders.id = order_items.order_id
    AND orders.user_id = auth.uid()
  ));

CREATE POLICY "Users can create their own order items"
  ON order_items
  FOR INSERT
  TO authenticated
  WITH CHECK (EXISTS (
    SELECT 1 FROM orders
    WHERE orders.id = order_items.order_id
    AND orders.user_id = auth.uid()
  ));

CREATE POLICY "Staff can view all order items"
  ON order_items
  FOR SELECT
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.role IN ('admin', 'staff')
  ));

CREATE POLICY "Staff can update order items"
  ON order_items
  FOR UPDATE
  TO authenticated
  USING (EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.role IN ('admin', 'staff')
  ));

-- Create sample menu items
INSERT INTO menu_items (name, description, price, image_url, category, available, preparation_time)
VALUES
  ('Crispy Calamari', 'Tender calamari rings, lightly battered and fried to perfection. Served with lemon aioli.', 12.99, 'https://images.pexels.com/photos/4553031/pexels-photo-4553031.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'appetizers', true, 15),
  ('Truffle Mushroom Risotto', 'Creamy Arborio rice with wild mushrooms, finished with truffle oil and Parmesan cheese.', 18.99, 'https://images.pexels.com/photos/6287525/pexels-photo-6287525.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'main', true, 25),
  ('Grilled Salmon', 'Fresh Atlantic salmon fillet, grilled and served with seasonal vegetables and lemon butter sauce.', 24.99, 'https://images.pexels.com/photos/3763847/pexels-photo-3763847.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'main', true, 20),
  ('Chocolate Lava Cake', 'Warm chocolate cake with a molten center, served with vanilla ice cream and fresh berries.', 9.99, 'https://images.pexels.com/photos/132694/pexels-photo-132694.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'desserts', true, 18),
  ('Craft Mojito', 'Fresh mint, lime, sugar, premium rum, and soda water. A refreshing classic with a twist.', 10.99, 'https://images.pexels.com/photos/4021983/pexels-photo-4021983.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'drinks', true, 8),
  ('Bruschetta', 'Toasted baguette slices topped with diced tomatoes, fresh basil, garlic, and olive oil.', 8.99, 'https://images.pexels.com/photos/1211887/pexels-photo-1211887.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'appetizers', true, 12),
  ('Filet Mignon', '8oz premium beef tenderloin, grilled to your preference, with truffle mashed potatoes and asparagus.', 34.99, 'https://images.pexels.com/photos/675951/pexels-photo-675951.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'main', true, 30),
  ('Tiramisu', 'Classic Italian dessert with layers of coffee-soaked ladyfingers and mascarpone cream.', 8.99, 'https://images.pexels.com/photos/6133305/pexels-photo-6133305.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'desserts', true, 15),
  ('Signature Sangria', 'House-made red wine sangria with fresh fruits and a splash of brandy.', 9.99, 'https://images.pexels.com/photos/1232353/pexels-photo-1232353.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2', 'drinks', true, 10);
